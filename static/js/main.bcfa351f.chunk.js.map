{"version":3,"sources":["components/card/card.component.js","components/cards-list/cards-list.component.js","components/search-field/search-field.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardsList","monsters","map","SearchField","type","placeholder","onChange","handleChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UACaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,kBACnE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHbC,G,MAAY,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,aAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJhDO,G,MAAc,SAAAX,GAAK,OAC5B,uBAAOC,UAAU,SAASW,KAAK,SAASC,YAAab,EAAMa,YAAcC,SAAUd,EAAMe,iBCGvFC,E,4MACJC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,uDAGf,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG5C,WAAU,IAAD,OACP,iBAAmCE,KAAKR,OAAjCR,EAAP,EAAOA,SAASS,EAAhB,EAAgBA,YACVQ,EAAmBjB,EAASkB,QAAO,SAAAxB,GAAO,OAAIA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBACpG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAaY,YAAY,kBAAkBE,aAAc,SAAAe,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACnG,cAAC,EAAD,CAAWvB,SAAUiB,W,GAnBXO,aA0BHjB,ICnBAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bcfa351f.chunk.js","sourcesContent":["import './card.css';\nexport const Card = props => (\n    <div className=\"card\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt='monster image'/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import { Card } from '../card/card.component';\nimport './cards-list.css';\nexport const CardsList = props => (\n    <div className=\"cards-list\">\n        {\n            props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)\n        }\n    </div>\n)","import './search-field.css';\nexport const SearchField = props => (\n    <input className=\"search\" type=\"search\" placeholder={props.placeholder}  onChange={props.handleChange}/>\n)","import './App.css';\nimport { Component } from 'react';\nimport {CardsList} from './components/cards-list/cards-list.component';\nimport {SearchField} from './components/search-field/search-field'; \n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: ''\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));  \n  }\n\n  render() {\n    const {monsters,searchField} = {...this.state};\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchField placeholder=\"search monsters\" handleChange={e => this.setState({searchField: e.target.value})}/>\n        <CardsList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}